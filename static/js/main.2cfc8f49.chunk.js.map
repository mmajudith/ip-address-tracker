{"version":3,"sources":["images/icon-location.svg","images/icon-arrow.svg","customIcon/Icon.js","components/Search.js","components/Attribution.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","pointerIcon","L","Icon","iconUrl","require","iconRetinaUrl","iconAnchor","popupAnchor","Search","useState","input","setInput","undefined","map","setMap","ipRef","useRef","ispRef","countryRef","timezoneRef","allparams","getIpAddress","useCallback","a","axios","get","response","data","console","log","UpdateUI","ip","isp","location","country","timezone","lat","lng","current","textContent","useEffect","then","catch","err","className","onSubmit","e","preventDefault","type","name","value","placeholder","onChange","target","src","Arrow","alt","ref","Map","id","center","zoom","TileLayer","attribution","url","tileSize","zoomOffset","accessToken","Marker","position","icon","Popup","Attribution","href","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2cfc8f49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-location.ff171469.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-arrow.53ef8ed8.svg\";","import L from 'leaflet'\r\n\r\nconst pointerIcon = new L.Icon({\r\n    iconUrl: require('../images/icon-location.svg'),\r\n    iconRetinaUrl: require('../images/icon-location.svg'),\r\n    iconAnchor: [5, 55],\r\n    popupAnchor: [10, -44]\r\n})\r\n\r\n\r\nexport default pointerIcon","import React, { useState, useRef, useEffect, useCallback }from 'react';\r\nimport axios from 'axios';\r\nimport {Map, TileLayer, Marker, Popup} from 'react-leaflet';\r\nimport pointerIcon from '../customIcon/Icon'\r\nimport Arrow   from '../images/icon-arrow.svg';\r\n\r\nfunction Search() {\r\n\r\n    // Variables declaration\r\n    const [input, setInput] = useState(\"\");\r\n    const [map , setMap] = useState(undefined)\r\n    const ipRef = useRef(null);\r\n    const ispRef = useRef(null);\r\n    const countryRef = useRef(null);\r\n    const timezoneRef = useRef(null);\r\n    const key = 'at_rnncwFCG5vw4wcvNiSlCNRNu3bbbc';\r\n    const allparams = `apiKey=${key}&ipAddress=${input}&domain=${input}`;\r\n    \r\n    // Http Call function\r\n    const getIpAddress = useCallback(async () =>{\r\n        try{\r\n            const response = await axios.get(`https://geo.ipify.org/api/v1?${allparams}`);\r\n            const data = await response;\r\n            \r\n            return data\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }, [allparams])\r\n\r\n    //Update UI Function\r\n    const UpdateUI = ({data}) =>{\r\n\r\n        const { ip, isp, location:{country, timezone, lat, lng} } = data\r\n        \r\n        ipRef.current.textContent = ip;\r\n        ispRef.current.textContent = isp;\r\n        countryRef.current.textContent = country;\r\n        timezoneRef.current.textContent = timezone;\r\n\r\n        setMap({lat, lng})\r\n\r\n    }\r\n\r\n    // Form submit function\r\n    const submit = (e) =>{\r\n        e.preventDefault();\r\n        getIpAddress()\r\n        .then(data => UpdateUI(data))\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    //Mount once\r\n    useEffect(()=>{\r\n        getIpAddress()\r\n        .then(data => UpdateUI(data))\r\n        .catch(err => console.log(err))\r\n    }, [] );\r\n\r\n  return (\r\n    <div>\r\n        \r\n        <div className=\"search-wrapper\">\r\n            <h1>IP Address Tracker</h1>\r\n\r\n            <form onSubmit={submit} className=\"ip-search\">\r\n            \r\n                <input type=\"text\" name=\"ip-address\"\r\n                 value={input} placeholder=\" Search for any IP address or domain\" \r\n                 onChange={e => setInput(e.target.value)}/>\r\n\r\n                <button type=\"submit\"><img src={Arrow} alt=\"arrow-icon\"/></button>\r\n            </form>\r\n\r\n            <div className=\"results-wrapper\">\r\n\r\n                <div className=\"address\">\r\n                    <p>IP Address</p>\r\n                    <p ref={ipRef} className=\"ip-output\"></p>\r\n                </div>\r\n                    \r\n                <div className=\"location\">\r\n                    <p>Location</p>\r\n                    <p ref={countryRef} className=\"lo-output\"></p>\r\n                </div>\r\n                    \r\n                <div className=\"time\">\r\n                    <p>Timezone</p>\r\n                    <p ref={timezoneRef} className=\"ti-output\"> </p>\r\n                </div>\r\n                    \r\n                <div className=\"isp\">\r\n                    <p>ISP</p>\r\n                    <p ref={ispRef} className=\"isp-output\"></p>\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n        \r\n        {\r\n            map === undefined? <h2>Loading...</h2> :\r\n                <Map id=\"map\" center={map} zoom={10}>\r\n                    <TileLayer \r\n                        attribution='Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>'\r\n                        url='https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibW1hanVkaXRoIiwiYSI6ImNrZm1tNDhyazAycDIydW1wbzB1MmRib2kifQ.FzSFSsXaE8rPFBwhrbr5Vg'\r\n                        id= 'mapbox/streets-v11'\r\n                        tileSize={512}\r\n                        zoomOffset={-1}\r\n                        accessToken= 'your.mapbox.access.token'\r\n                            \r\n                    />\r\n                    <Marker position={map} icon={pointerIcon}>\r\n                        <Popup>\r\n                            <span>City where your IP<br></br> address is located.</span>\r\n                        </Popup>\r\n                    </Marker>    \r\n                </Map>\r\n        }\r\n    \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\n\r\nfunction Attribution() {\r\n  return (\r\n    <div>\r\n        <div className=\"attribution\">\r\n            Challenge by <a href=\"https://www.frontendmentor.io?ref=challenge\" >Frontend Mentor</a>. \r\n            Coded by <a href=\"https://github.com/mmajudith\">Onyekwelu Judith</a>.\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Attribution\r\n","import React from 'react';\nimport './App.css';\nimport Search from './components/Search';\nimport Attribution from './components/Attribution'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Search />\n      <Attribution />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}